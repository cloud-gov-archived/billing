// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createCF_org = `-- name: CreateCF_org :one
INSERT INTO cf_org (
  name, tier_id, credits_quota, credits_used, customer_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, tier_id, credits_quota, credits_used, customer_id
`

type CreateCF_orgParams struct {
	Name         string
	TierID       string
	CreditsQuota int64
	CreditsUsed  int64
	CustomerID   int64
}

func (q *Queries) CreateCF_org(ctx context.Context, arg CreateCF_orgParams) (CfOrg, error) {
	row := q.db.QueryRowContext(ctx, createCF_org,
		arg.Name,
		arg.TierID,
		arg.CreditsQuota,
		arg.CreditsUsed,
		arg.CustomerID,
	)
	var i CfOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TierID,
		&i.CreditsQuota,
		&i.CreditsUsed,
		&i.CustomerID,
	)
	return i, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  id, name
) VALUES (
  $1, $2
)
RETURNING id, name
`

type CreateCustomerParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.ID, arg.Name)
	var i Customer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCF_org = `-- name: DeleteCF_org :exec
DELETE FROM cf_org
WHERE id = $1
`

func (q *Queries) DeleteCF_org(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteCF_org, id)
	return err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCF_Org = `-- name: GetCF_Org :one
SELECT id, name, tier_id, credits_quota, credits_used, customer_id FROM cf_org
WHERE id = $1 LIMIT 1
`

// START CF_ORG
func (q *Queries) GetCF_Org(ctx context.Context, id interface{}) (CfOrg, error) {
	row := q.db.QueryRowContext(ctx, getCF_Org, id)
	var i CfOrg
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TierID,
		&i.CreditsQuota,
		&i.CreditsUsed,
		&i.CustomerID,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, name FROM customer
WHERE id = $1 LIMIT 1
`

// Start Customer
func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCF_orgs = `-- name: ListCF_orgs :many
SELECT id, name, tier_id, credits_quota, credits_used, customer_id FROM cf_org
ORDER BY name
`

func (q *Queries) ListCF_orgs(ctx context.Context) ([]CfOrg, error) {
	rows, err := q.db.QueryContext(ctx, listCF_orgs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CfOrg
	for rows.Next() {
		var i CfOrg
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TierID,
			&i.CreditsQuota,
			&i.CreditsUsed,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, name FROM customer
ORDER BY name
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCF_org = `-- name: UpdateCF_org :exec
UPDATE cf_org
  set name = $2,
  tier_id = $3,
  credits_quota = $4,
  credits_used = $5
WHERE id = $1
`

type UpdateCF_orgParams struct {
	ID           interface{}
	Name         string
	TierID       string
	CreditsQuota int64
	CreditsUsed  int64
}

func (q *Queries) UpdateCF_org(ctx context.Context, arg UpdateCF_orgParams) error {
	_, err := q.db.ExecContext(ctx, updateCF_org,
		arg.ID,
		arg.Name,
		arg.TierID,
		arg.CreditsQuota,
		arg.CreditsUsed,
	)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
  set name = $2
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer, arg.ID, arg.Name)
	return err
}
